#include <iostream>
using namespace std;

struct node{
	char element;
	node *next;
};

class stack{
	public:
		node *head=NULL;
	public:
		bool kosong(){
			if(head==NULL)
				return true;
			else
			return false;
			}
			
void push(char a){
			node *baru=new node;
			baru->element=a;
			baru->next=NULL;
			if(kosong()){
				head=baru;
			}
			else{
				baru->next=head;
				head=baru;
			}
		}
    		char pop(){
			if(kosong()){
				cout<<"stack kosong"<<endl;
			return 0;
			}
			
      		else{
				char ch=head->element;
				node *tmp=head->next;
				delete head;
				head=tmp;
				return ch;
			}
		}
		char top(){
			return head->element;
		}	
		
		void cetak(){
			if(kosong()){
				cout<<"Stack Kosong!";
			}
      		else{
				node *bantu=head;
				while(bantu!=NULL){
					cout<<bantu->element<<endl;
					bantu=bantu->next;
				}
			}
		}    
};

int cek(char cekoperator){	
	if(cekoperator=='*'||cekoperator=='/')
		return 2;
	else
		return 1;
}

int main(){
	stack S;
	int i=0,n=0,A,B,C;
	char postfix[256];
	char infix[256];
	
	cout<<"masukkan infix:"<<endl;
	cin>>infix;
	while(infix[i]!='\0'){
		if(isdigit(infix[i])){
			postfix[n]=infix[i];
			n++;
		}
		else if(infix[i]=='('){
			S.push(infix[i]);
		}
		else if(infix[i]==')'){
			while(!S.kosong() && S.top()!='('){
				postfix[n]=S.pop();
				n++;
			}
			S.pop();
		}
		else{
			if(S.kosong() || S.top()=='('){
				S.push(infix[i]);
			}
			else{
				while(!S.kosong() && S.top()!='(' && cek(infix[i])<=cek(S.top())){
					postfix[n]=S.pop();
					n++;
				}
				S.push(infix[i]);
			}
		}
		i++;
	}
while(!S.kosong()){
		postfix[n]=S.pop();
		n++;
	}
	n=0;
  	while(postfix[n]!='\0'){  
    		if(isdigit(postfix[n])){
				S.push(postfix[n]);
			}
	  		else{
		 		A=S.pop()-'0';
		 		B=S.pop()-'0';
				if(postfix[n]=='*'){
					C=B*A;
					S.push(C+'0');
		  		}
      			else if(postfix[n]=='/'){
			 		C=B/A;
		 			S.push(C+'0');
		  		}
				else if(postfix[n]=='+'){
			 		C=B+A;
					S.push(C+'0');	
		  		}
				else if(postfix[n]=='-'){
					C=B-A;
					S.push(C+'0');
		  		}
				else{
					cout<<"Stack tidak ada"<<endl;
		  		}
			}
	  	n++;
  	}
	cout<<S.pop()-'0';
	return 0;}
